// <auto-generated />
using CoffeeSpace.PaymentService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoffeeSpace.PaymentService.Persistence.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    [Migration("20231004161937_Updated_PaypalOrder_Model")]
    partial class Updated_PaypalOrder_Model
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoffeeSpace.PaymentService.Models.PaypalOrderInformation", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ApplicationOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("PaypalOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PaypalOrderId")
                        .IsUnique();

                    b.ToTable("Paypal Orders", (string)null);
                });

            modelBuilder.Entity("PayPalCheckoutSdk.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CheckoutPaymentIntent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ExpirationTime")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdateTime")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("PayPalCheckoutSdk.Orders.PurchaseUnit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("SoftDescriptor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("PurchaseUnits", (string)null);
                });

            modelBuilder.Entity("CoffeeSpace.PaymentService.Models.PaypalOrderInformation", b =>
                {
                    b.HasOne("PayPalCheckoutSdk.Orders.Order", "PaypalOrder")
                        .WithOne()
                        .HasForeignKey("CoffeeSpace.PaymentService.Models.PaypalOrderInformation", "PaypalOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaypalOrder");
                });

            modelBuilder.Entity("PayPalCheckoutSdk.Orders.PurchaseUnit", b =>
                {
                    b.HasOne("PayPalCheckoutSdk.Orders.Order", null)
                        .WithMany("PurchaseUnits")
                        .HasForeignKey("OrderId");

                    b.OwnsMany("PayPalCheckoutSdk.Orders.Item", "Items", b1 =>
                        {
                            b1.Property<string>("PurchaseUnitId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(250)
                                .IsUnicode(false)
                                .HasColumnType("character varying(250)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Quantity")
                                .IsRequired()
                                .IsUnicode(false)
                                .HasColumnType("text");

                            b1.Property<string>("UnitAmount")
                                .IsRequired()
                                .IsUnicode(false)
                                .HasColumnType("text");

                            b1.HasKey("PurchaseUnitId", "Id");

                            b1.ToTable("Items", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PurchaseUnitId");
                        });

                    b.Navigation("Items");
                });

            modelBuilder.Entity("PayPalCheckoutSdk.Orders.Order", b =>
                {
                    b.Navigation("PurchaseUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
